// ============================================================
// BOT DE TRIAGEM PARA WHATSAPP - SAAE
// Desenvolvido com Node.js e whatsapp-web.js
// ============================================================

// Importa√ß√£o das bibliotecas necess√°rias
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

// ============================================================
// CONFIGURA√á√ÉO DOS RESPONS√ÅVEIS (EDITE AQUI OS N√öMEROS)
// ============================================================
// Formato: 55 (c√≥digo do pa√≠s) + DDD + N√∫mero + @c.us
const RESPONSAVEIS = {
    faturas: '5518997587462@c.us',              // N√∫mero do respons√°vel por Faturas
    duvidas: '5518997587462@c.us',              // N√∫mero do respons√°vel por D√∫vidas e Informa√ß√µes
    reportes: '5518997587462@c.us'              // N√∫mero do respons√°vel por Reportes
};

// ============================================================
// INICIALIZA√á√ÉO DO CLIENTE WHATSAPP
// ============================================================
console.log('Criando cliente WhatsApp...');
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "saae-bot-triagem"
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu'
        ]
    }
});
console.log('Cliente criado com sucesso!');

// ============================================================
// EVENTO: GERA√á√ÉO DO QR CODE
// ============================================================
// Este evento √© disparado quando o bot precisa de autentica√ß√£o
client.on('qr', (qr) => {
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ  QR CODE GERADO - ESCANEIE COM O APP  ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    qrcode.generate(qr, { small: true });
    console.log('\n‚úì Abra o WhatsApp no seu celular');
    console.log('‚úì V√° em Configura√ß√µes > Aparelhos conectados');
    console.log('‚úì Escaneie o QR Code acima\n');
});

// ============================================================
// EVENTO: CLIENTE PRONTO
// ============================================================
// Disparado quando o bot est√° conectado e pronto para uso
client.on('ready', () => {
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ     ‚úì BOT CONECTADO COM SUCESSO!      ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    console.log(`Bot iniciado em: ${new Date().toLocaleString('pt-BR')}`);
    console.log('Aguardando mensagens...\n');
});

// ============================================================
// EVENTO: AUTENTICA√á√ÉO BEM-SUCEDIDA
// ============================================================
client.on('authenticated', () => {
    console.log('‚úì Autentica√ß√£o realizada com sucesso!');
    console.log('‚úì Sess√£o salva localmente para pr√≥ximas execu√ß√µes.\n');
});

// ============================================================
// EVENTO: FALHA NA AUTENTICA√á√ÉO
// ============================================================
client.on('auth_failure', (message) => {
    console.error('‚úó Falha na autentica√ß√£o:', message);
    console.log('Tente deletar a pasta .wwebjs_auth e reiniciar o bot.\n');
});

// ============================================================
// EVENTO: DESCONEX√ÉO
// ============================================================
client.on('disconnected', (reason) => {
    console.log('‚úó Bot desconectado. Motivo:', reason);
    console.log('Tentando reconectar...\n');
});

// ============================================================
// FUN√á√ÉO: CRIAR MENU PRINCIPAL
// ============================================================
function criarMenuPrincipal() {
    return `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ü§ñ *ATENDIMENTO AUTOMATIZADO*  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Ol√°! üëã Bem-vindo(a) ao atendimento SAAE.

Por favor, digite o *n√∫mero* da op√ß√£o desejada:

*1* - üí∞ Faturas
*2* - ‚ùì D√∫vidas e Informa√ß√µes  
*3* - üì¢ Reportes

_Digite apenas o n√∫mero (1, 2 ou 3)_`;
}

// ============================================================
// FUN√á√ÉO: ENVIAR NOTIFICA√á√ÉO PARA RESPONS√ÅVEL
// ============================================================
async function notificarResponsavel(opcao, numeroCliente, nomeCliente) {
    try {
        const setorInfo = {
            '1': { nome: 'Faturas', responsavel: RESPONSAVEIS.faturas },
            '2': { nome: 'D√∫vidas e Informa√ß√µes', responsavel: RESPONSAVEIS.duvidas },
            '3': { nome: 'Reportes', responsavel: RESPONSAVEIS.reportes }
        };

        const setor = setorInfo[opcao];
        if (!setor) return;

        // Formata o n√∫mero do cliente para exibi√ß√£o (sem @c.us)
        const numeroFormatado = numeroCliente.replace('@c.us', '');

        const mensagemNotificacao = 
            `üîî *NOVA SOLICITA√á√ÉO - ${setor.nome.toUpperCase()}*\n\n` +
            `üë§ Cliente: ${nomeCliente || 'N√£o identificado'}\n` +
            `üì± N√∫mero: ${numeroFormatado}\n` +
            `‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\n\n` +
            `O cliente est√° aguardando atendimento. Por favor, entre em contato.`;

        await client.sendMessage(setor.responsavel, mensagemNotificacao);
        
        console.log(`‚úì Notifica√ß√£o enviada para ${setor.nome}: ${setor.responsavel}`);
    } catch (error) {
        console.error('‚úó Erro ao enviar notifica√ß√£o:', error);
    }
}

// ============================================================
// FUN√á√ÉO: PROCESSAR OP√á√ÉO DO USU√ÅRIO
// ============================================================
async function processarOpcao(opcao, message) {
    const chat = await message.getChat();
    const contato = await message.getContact();
    const nomeCliente = contato.pushname || contato.name || '';

    let mensagemConfirmacao = '';
    let setorNome = '';

    switch (opcao) {
        case '1':
            setorNome = 'Faturas';
            mensagemConfirmacao = 
                `‚úÖ *Solicita√ß√£o Recebida - Faturas*\n\n` +
                `Sua solicita√ß√£o foi enviada para a equipe de Faturas.\n` +
                `Em breve, um de nossos atendentes entrar√° em contato com voc√™.\n\n` +
                `Obrigado pela sua paci√™ncia! üôè`;
            break;

        case '2':
            setorNome = 'D√∫vidas e Informa√ß√µes';
            mensagemConfirmacao = 
                `‚úÖ *Solicita√ß√£o Recebida - D√∫vidas e Informa√ß√µes*\n\n` +
                `Sua solicita√ß√£o foi enviada para a equipe de D√∫vidas e Informa√ß√µes.\n` +
                `Em breve, um de nossos atendentes entrar√° em contato com voc√™.\n\n` +
                `Obrigado pela sua paci√™ncia! üôè`;
            break;

        case '3':
            setorNome = 'Reportes';
            mensagemConfirmacao = 
                `‚úÖ *Solicita√ß√£o Recebida - Reportes*\n\n` +
                `Sua solicita√ß√£o foi enviada para a equipe de Reportes.\n` +
                `Em breve, um de nossos atendentes entrar√° em contato com voc√™.\n\n` +
                `Obrigado pela sua paci√™ncia! üôè`;
            break;

        default:
            // Op√ß√£o inv√°lida
            const mensagemErro = 
                `‚ùå *Op√ß√£o inv√°lida!*\n\n` +
                `Por favor, digite apenas *1*, *2* ou *3*.\n\n` +
                criarMenuPrincipal();
            await message.reply(mensagemErro);
            console.log(`‚úó Op√ß√£o inv√°lida recebida: ${opcao}`);
            return;
    }

    console.log(`‚Üí Processando solicita√ß√£o para: ${setorNome}`);

    // Envia mensagem de confirma√ß√£o para o cliente
    await message.reply(mensagemConfirmacao);
    console.log('‚úì Confirma√ß√£o enviada ao cliente');

    // Envia notifica√ß√£o para o respons√°vel do setor
    await notificarResponsavel(opcao, message.from, nomeCliente);
    console.log('‚úì Processo de triagem conclu√≠do!\n');
}

// ============================================================
// EVENTO PRINCIPAL: RECEBIMENTO DE MENSAGENS
// ============================================================
client.on('message', async (message) => {
    try {
        // Ignora mensagens de status e mensagens enviadas pelo pr√≥prio bot
        if (message.from === 'status@broadcast' || message.fromMe) {
            return;
        }

        const remetente = message.from;
        const corpo = message.body.trim();

        console.log(`\nüì© Mensagem recebida de: ${remetente}`);
        console.log(`Conte√∫do: ${corpo}`);

        // Verifica se a mensagem √© uma op√ß√£o v√°lida (1, 2 ou 3)
        if (corpo === '1' || corpo === '2' || corpo === '3') {
            await processarOpcao(corpo, message);
        } else {
            // Qualquer outra mensagem exibe o menu
            console.log('‚Üí Enviando menu de op√ß√µes...');
            const menu = criarMenuPrincipal();
            await message.reply(menu);
            console.log('‚úì Menu enviado com sucesso!\n');
        }

    } catch (error) {
        console.error('‚úó Erro ao processar mensagem:', error);
    }
});

// ============================================================
// INICIALIZA√á√ÉO DO BOT
// ============================================================
console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
console.log('‚îÇ   ü§ñ BOT DE TRIAGEM SAAE - INICIANDO  ‚îÇ');
console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

console.log('Aguarde... Inicializando navegador automatizado (Puppeteer)...');
console.log('Isso pode demorar 20-40 segundos na primeira vez.\n');

// Inicia o cliente
client.initialize()
    .then(() => {
        console.log('Cliente inicializado!');
    })
    .catch((err) => {
        console.error('ERRO ao inicializar cliente:', err);
    });

// ============================================================
// TRATAMENTO DE ERROS GLOBAIS
// ============================================================
process.on('unhandledRejection', (reason, promise) => {
    console.error('\n‚úó ERRO N√ÉO TRATADO (Rejection):', reason);
});

process.on('uncaughtException', (error) => {
    console.error('\n‚úó EXCE√á√ÉO N√ÉO CAPTURADA:', error);
    process.exit(1);
});

// Log adicional de loading
client.on('loading_screen', (percent, message) => {
    console.log(`Carregando... ${percent}% - ${message}`);
});
